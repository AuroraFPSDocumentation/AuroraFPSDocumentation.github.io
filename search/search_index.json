{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Aurora FPS Documentation Aurora FPS is the best solution for any FPS game. This is the most powerful asset that implements the most advanced and unique systems and features for creating AAA games for any platform: PC, console, mobile, etc. Aurora FPS is suitable for any developer, both for beginners and experienced users, or for large professional teams. For this asset created powerful and unique editor, which allows you to configure any system for yourself and for any type of the game. Also Aurora FPS has a very useful and detailed Documentation and API. Helpful Links API Videos Discord Forum Twitter Demo","title":"Home"},{"location":"#welcome-to-aurora-fps-documentation","text":"Aurora FPS is the best solution for any FPS game. This is the most powerful asset that implements the most advanced and unique systems and features for creating AAA games for any platform: PC, console, mobile, etc. Aurora FPS is suitable for any developer, both for beginners and experienced users, or for large professional teams. For this asset created powerful and unique editor, which allows you to configure any system for yourself and for any type of the game. Also Aurora FPS has a very useful and detailed Documentation and API.","title":"Welcome to Aurora FPS Documentation"},{"location":"#helpful-links","text":"API Videos Discord Forum Twitter Demo","title":"Helpful Links"},{"location":"getting-started/","text":"Import Project After you downloaded the project press Import button. The project is fully configured, you don't need to make any configurations after importing. Note Project Settings will be overrided (Tags and Layers) It is possible for Unity to offer you automatic download of dependencies (ProBuilder). Aurora FPS was used ProBuilder to create a demo scene, you can refuse to download it or delete it later. Demo Scene For open demo scene go to path: Assets/Aurora FPS/Base Content/Scenes/Base Demo/Base Demo Scene","title":"Getting Started"},{"location":"getting-started/#import-project","text":"After you downloaded the project press Import button. The project is fully configured, you don't need to make any configurations after importing. Note Project Settings will be overrided (Tags and Layers) It is possible for Unity to offer you automatic download of dependencies (ProBuilder). Aurora FPS was used ProBuilder to create a demo scene, you can refuse to download it or delete it later.","title":"Import Project"},{"location":"getting-started/#demo-scene","text":"For open demo scene go to path: Assets/Aurora FPS/Base Content/Scenes/Base Demo/Base Demo Scene","title":"Demo Scene"},{"location":"ai_section/core/","text":"Create AI Controller Open Aurora Manager window, go to the top tabs: Aurora FPS/Aurora Manager Choose Player section: Artificial Intelligence Property Description Template NPC: AI controller with a base movemnt animator controller. Soldier: AI controller with a movement, weapon, etc. animator controller. Name Name of AI controller. Body Add body gameobject for AI controller. Avatar Avatar for added gameobject body. Tag Tag for AI controller by default setted Default tag. Layer Layer for AI controller by default setted Default layer. Has Ragdoll Apply True if you add in Body property ragdolled body gameobject. Because if is it true system autoamtically add AIAdaptiveRagdoll component. You can add a ragdoll to the body and then add this body in Body property. ( How create ragdoll) Count How many instances of AI controller to create. Optional Components You can also add various optional components to the AI controller if desired (depending on the template , some of the optional components may already be pre-installed in the template) . After complete configuration click Create button. AI Core AI Core is the main component in AI. It performs all the necessary calculations and settings. You can add different behaviours and configure transitions between them. Property Description Default Behaviour This behaviour will be set by the AI as the start behaviour. Add Behaviour For add new behaviour click on Add Behaviour button and select desired behaviour. Behaviour Properties All behaviour contains default and custom properties, they are differ depending on the behaviour. Default Property Description Name Name of behaviour. Trasitions Transitions to other behaviours. Events Events of behaviour. Note Behaviour name must be unique, you can't set two same names or set empty name. Transitions Transition from one state to another when all the added conditions are met. UI Element Description The behaviour to which the transition should be made when all conditions are met. Ignores this transition for processing. Remove trasition. Add new transition to behaviour. Remove all transition containing in behaviour. Conditions Condition under which the transition will be made. For add new condition to transition use button and seleced desired condition. All behaviour contains default and custom properties, they are differ depending on the condition. Default Property Description Mute Ignores this condition for processing. UI Element Description Add new condition. Remove selected condition. Move/Replace condition. Expaned condition to edit. Logical Operators You can create transitions that will be performed when all the conditions are met or when one of the conditions is met. For those who are even slightly familiar with programming, they are familiar as logical operators, in particular, for processing conditions used binary operators and || . AND ( ) Operator If you want to create a transition that will only be maked when all the conditions are met. Create transition and place all desired conditions inside this transition. OR (||) Operator If you want to create a transition that will only be maked when one of the conditions is met. Create multiple transitions with same target behaviour, with different conditions, so then the transition will be maked when the conditions from one of the transitions are met.","title":"Core"},{"location":"ai_section/core/#create-ai-controller","text":"Open Aurora Manager window, go to the top tabs: Aurora FPS/Aurora Manager Choose Player section: Artificial Intelligence Property Description Template NPC: AI controller with a base movemnt animator controller. Soldier: AI controller with a movement, weapon, etc. animator controller. Name Name of AI controller. Body Add body gameobject for AI controller. Avatar Avatar for added gameobject body. Tag Tag for AI controller by default setted Default tag. Layer Layer for AI controller by default setted Default layer. Has Ragdoll Apply True if you add in Body property ragdolled body gameobject. Because if is it true system autoamtically add AIAdaptiveRagdoll component. You can add a ragdoll to the body and then add this body in Body property. ( How create ragdoll) Count How many instances of AI controller to create. Optional Components You can also add various optional components to the AI controller if desired (depending on the template , some of the optional components may already be pre-installed in the template) . After complete configuration click Create button.","title":"Create AI Controller"},{"location":"ai_section/core/#ai-core","text":"AI Core is the main component in AI. It performs all the necessary calculations and settings. You can add different behaviours and configure transitions between them. Property Description Default Behaviour This behaviour will be set by the AI as the start behaviour.","title":"AI Core"},{"location":"ai_section/core/#add-behaviour","text":"For add new behaviour click on Add Behaviour button and select desired behaviour.","title":"Add Behaviour"},{"location":"ai_section/core/#behaviour-properties","text":"All behaviour contains default and custom properties, they are differ depending on the behaviour. Default Property Description Name Name of behaviour. Trasitions Transitions to other behaviours. Events Events of behaviour. Note Behaviour name must be unique, you can't set two same names or set empty name.","title":"Behaviour Properties"},{"location":"ai_section/core/#transitions","text":"Transition from one state to another when all the added conditions are met. UI Element Description The behaviour to which the transition should be made when all conditions are met. Ignores this transition for processing. Remove trasition. Add new transition to behaviour. Remove all transition containing in behaviour.","title":"Transitions"},{"location":"ai_section/core/#conditions","text":"Condition under which the transition will be made. For add new condition to transition use button and seleced desired condition. All behaviour contains default and custom properties, they are differ depending on the condition. Default Property Description Mute Ignores this condition for processing. UI Element Description Add new condition. Remove selected condition. Move/Replace condition. Expaned condition to edit.","title":"Conditions"},{"location":"ai_section/core/#logical-operators","text":"You can create transitions that will be performed when all the conditions are met or when one of the conditions is met. For those who are even slightly familiar with programming, they are familiar as logical operators, in particular, for processing conditions used binary operators and || .","title":"Logical Operators"},{"location":"ai_section/core/#and-operator","text":"If you want to create a transition that will only be maked when all the conditions are met. Create transition and place all desired conditions inside this transition.","title":"AND (&amp;&amp;) Operator"},{"location":"ai_section/core/#or-operator","text":"If you want to create a transition that will only be maked when one of the conditions is met. Create multiple transitions with same target behaviour, with different conditions, so then the transition will be maked when the conditions from one of the transitions are met.","title":"OR (||) Operator"},{"location":"ai_section/destination-map/","text":"Overview Destination Map - This is a special array of points of the Transform type that is used to determine the destination points for AI. Tip Also you can use this map in other cases. Create Map Go to the MenuItem path: Aurora FPS/Create/AI/Destination Map Configure Map For configuration map edit Destination Map component. UI Element Description Add new destination. Remove selected destination. Clear all destination from map. (This button is only available when there is more than one destination on the map) Add Destination Press button to add new destination. Create empty object at the scene. Drag and drop created object to empty destination field.","title":"Destination Map"},{"location":"ai_section/destination-map/#overview","text":"Destination Map - This is a special array of points of the Transform type that is used to determine the destination points for AI. Tip Also you can use this map in other cases.","title":"Overview"},{"location":"ai_section/destination-map/#create-map","text":"Go to the MenuItem path: Aurora FPS/Create/AI/Destination Map","title":"Create Map"},{"location":"ai_section/destination-map/#configure-map","text":"For configuration map edit Destination Map component. UI Element Description Add new destination. Remove selected destination. Clear all destination from map. (This button is only available when there is more than one destination on the map)","title":"Configure Map"},{"location":"ai_section/destination-map/#add-destination","text":"Press button to add new destination. Create empty object at the scene. Drag and drop created object to empty destination field.","title":"Add Destination"},{"location":"player_section/footstep-system/","text":"Overview Aurora FPS has an advanced step sound system. You can configure what sounds will be played when moving on a specific surface. All sounds that the player plays are contained in the Footstep Mapping asset. You can create an unlimited number of these files and register various sounds there. The system supports processing sounds relative to the physical material and texture of Terrain. Create Footstep Mappping Method 1 Go to the folder in which you want to create the map Right-click and follow this path Create / Aurora FPS / Mapping / Player / Footstep Method 2 Open Aurora Manager window, go to the top tabs: Aurora FPS/Aurora Manager Choose Mapping Asset section From the Mapping Type list, select Footstep Mapping . After that, all the input mapping assets that are in the project will be displayed. You can choose any of them and based on them create a new one by pressing the Duplicate button. This action will create a new map based on the map you have selected. The new map will have all the buttons that were contained in the parent map. This is convenient when you have configured a specific card and want to create a new one based on it, for example, for another platform or device. Note Don't forget to add the created map to your player. Find (add if is not added) FPFootstepSoundSystem component and add your new map in Mapping field. Tip You can create unlimited Footstep Mapping asset in project, however only one map can be assigned to the player. If the game is divided into levels, it is likely that there may be different types of surfaces in different levels that are not in others. So to improve performance, you can create different maps for different levels , so that you don 't have to store all possible surfaces in one map and use it for the entire game. Configure Footstep Mapping Select the map you want to edit. Each property stores the sounds of a step, jump, and landing. They will only be played when the player is on a specific physical surface or terrain texture. You can add an unlimited number of sounds of steps, jumps and landings. As an example, two different types of properties are added to Footstep Mapping . Physics Material Property All types of colliders have the material property. This way you can create physical material for a specific type of object. The example uses the Pallet object, it has a Box Collider component, and the object consists of a tree. We created the Wood physical material for it and added in the Physics Material property in Box Collider component. We added the same Wood physical material to all other wooden objects. Property Description Key Physics material, on which these sounds will be played. Step Sounds array, that will be played when player moveing on the ground. Jump Sounds array, that will be played when player jumping. Land Sounds array, that will be played when player landing. Terrain Texture Property When you create a Terrain, you add different layers. Also you add the Diffuse texture to each layer. By this Diffuse texture system detect surface and play sounds. For example, we added a layer with a \"Grass Diffuse\" texture as the \"Diffuse\". This same texture was added to Footstep Mapping and defined there the sounds that will be played when moving, pressing and pressing on this texture. Property Description Key Texture, on which these sounds will be played. Step Sounds array, that will be played when player moveing on the ground. Jump Sounds array, that will be played when player jumping. Land Sounds array, that will be played when player landing. Add Footstep Property To add a new property, click on the Add Property button. Select the type of property you want to add. In the window that appears, insert the property (Physics Material / Texture) and click the Apply button.","title":"Footstep System"},{"location":"player_section/footstep-system/#overview","text":"Aurora FPS has an advanced step sound system. You can configure what sounds will be played when moving on a specific surface. All sounds that the player plays are contained in the Footstep Mapping asset. You can create an unlimited number of these files and register various sounds there. The system supports processing sounds relative to the physical material and texture of Terrain.","title":"Overview"},{"location":"player_section/footstep-system/#create-footstep-mappping","text":"Method 1 Go to the folder in which you want to create the map Right-click and follow this path Create / Aurora FPS / Mapping / Player / Footstep Method 2 Open Aurora Manager window, go to the top tabs: Aurora FPS/Aurora Manager Choose Mapping Asset section From the Mapping Type list, select Footstep Mapping . After that, all the input mapping assets that are in the project will be displayed. You can choose any of them and based on them create a new one by pressing the Duplicate button. This action will create a new map based on the map you have selected. The new map will have all the buttons that were contained in the parent map. This is convenient when you have configured a specific card and want to create a new one based on it, for example, for another platform or device. Note Don't forget to add the created map to your player. Find (add if is not added) FPFootstepSoundSystem component and add your new map in Mapping field. Tip You can create unlimited Footstep Mapping asset in project, however only one map can be assigned to the player. If the game is divided into levels, it is likely that there may be different types of surfaces in different levels that are not in others. So to improve performance, you can create different maps for different levels , so that you don 't have to store all possible surfaces in one map and use it for the entire game.","title":"Create Footstep Mappping"},{"location":"player_section/footstep-system/#configure-footstep-mapping","text":"Select the map you want to edit. Each property stores the sounds of a step, jump, and landing. They will only be played when the player is on a specific physical surface or terrain texture. You can add an unlimited number of sounds of steps, jumps and landings. As an example, two different types of properties are added to Footstep Mapping .","title":"Configure Footstep Mapping"},{"location":"player_section/footstep-system/#physics-material-property","text":"All types of colliders have the material property. This way you can create physical material for a specific type of object. The example uses the Pallet object, it has a Box Collider component, and the object consists of a tree. We created the Wood physical material for it and added in the Physics Material property in Box Collider component. We added the same Wood physical material to all other wooden objects. Property Description Key Physics material, on which these sounds will be played. Step Sounds array, that will be played when player moveing on the ground. Jump Sounds array, that will be played when player jumping. Land Sounds array, that will be played when player landing.","title":"Physics Material Property"},{"location":"player_section/footstep-system/#terrain-texture-property","text":"When you create a Terrain, you add different layers. Also you add the Diffuse texture to each layer. By this Diffuse texture system detect surface and play sounds. For example, we added a layer with a \"Grass Diffuse\" texture as the \"Diffuse\". This same texture was added to Footstep Mapping and defined there the sounds that will be played when moving, pressing and pressing on this texture. Property Description Key Texture, on which these sounds will be played. Step Sounds array, that will be played when player moveing on the ground. Jump Sounds array, that will be played when player jumping. Land Sounds array, that will be played when player landing.","title":"Terrain Texture Property"},{"location":"player_section/footstep-system/#add-footstep-property","text":"To add a new property, click on the Add Property button. Select the type of property you want to add. In the window that appears, insert the property (Physics Material / Texture) and click the Apply button.","title":"Add Footstep Property"},{"location":"player_section/grab-system/","text":"Grabbing System Player controller grabbing system handled by Grabbing System component. Property Description Camera Player camera instance transform. Attach Body Transform to which the grab object will be attached. Grab Range Max grab range distance. Throw Force Grab object throw force. Throw Sound Grab object throw sound clip. Grab Layer Grab object culling layer. Grabbing System Events Event Description On Grab Event() Called when controller grab object. On Drop Event() Called when grabbed object is dropped. On Throw Event() Called when grabbed object throwed. Create Grab Object Open Aurora Manager window, go to the top tabs: Aurora FPS/Aurora Manager Choose Grab Object section: Interactive Object/Grab Object Property Description Template Entity: Empty grab object entity. Name Grab object name. Layer Grab object layer. By default used Interactive Object layer. Count How much instance count create. Override Override template meshes. (It may differ depending on the template) After complete configuration click Create button. Tip Also you can make any objects as grabbable object, just by adding GrabJoint component on them. Keep in mind that the grab object layer must match the culling layer in the Grabbing System component. Configure Grab Object For configure grab object find Grab Joint component on created grab object instance. Property Description Anchor The position of the axis around which the body swings. The position is defined in local space relative attach position. Smooth Object transform update smooth. Break Velocity The velocity at which an object must touch another object to break the joint. Freeze Rotation Controls whether physics will change the rotation of the object. Custom Rotation Custom rotation relative attach position.","title":"Grab System"},{"location":"player_section/grab-system/#grabbing-system","text":"Player controller grabbing system handled by Grabbing System component. Property Description Camera Player camera instance transform. Attach Body Transform to which the grab object will be attached. Grab Range Max grab range distance. Throw Force Grab object throw force. Throw Sound Grab object throw sound clip. Grab Layer Grab object culling layer.","title":"Grabbing System"},{"location":"player_section/grab-system/#grabbing-system-events","text":"Event Description On Grab Event() Called when controller grab object. On Drop Event() Called when grabbed object is dropped. On Throw Event() Called when grabbed object throwed.","title":"Grabbing System Events"},{"location":"player_section/grab-system/#create-grab-object","text":"Open Aurora Manager window, go to the top tabs: Aurora FPS/Aurora Manager Choose Grab Object section: Interactive Object/Grab Object Property Description Template Entity: Empty grab object entity. Name Grab object name. Layer Grab object layer. By default used Interactive Object layer. Count How much instance count create. Override Override template meshes. (It may differ depending on the template) After complete configuration click Create button. Tip Also you can make any objects as grabbable object, just by adding GrabJoint component on them. Keep in mind that the grab object layer must match the culling layer in the Grabbing System component.","title":"Create Grab Object"},{"location":"player_section/grab-system/#configure-grab-object","text":"For configure grab object find Grab Joint component on created grab object instance. Property Description Anchor The position of the axis around which the body swings. The position is defined in local space relative attach position. Smooth Object transform update smooth. Break Velocity The velocity at which an object must touch another object to break the joint. Freeze Rotation Controls whether physics will change the rotation of the object. Custom Rotation Custom rotation relative attach position.","title":"Configure Grab Object"},{"location":"player_section/health-system/","text":"Overview Player controller health system handled by FPHealth component. Property Description Health Actual player controller health points. Ranged between (Min Health - Max Health) proeprties. Min Health Limit the minimum possible health of the player controller. Ranged between (0 - Max Health)*. Max Health Limit the maximum possible health points of the player controller. Ranged between (Min Health - \u221e). Note The player dies when their health reaches 0. When you limit a player's Min Health property to a value greater than 0, you make them immortal. This is useful when you want to give a player a buff or something like that (For example like in Unreal Tournament, Quake, ect.) . Regeneration Properties Regeneration system automatically recover health points, after player controller take damage. Property Description Rate Speed of recovery of health points (in seconds) . Value How much health point add each rate. Delay Delay time before start recover health, after player take damage (in seconds) . Sound Effects Sound effects that are played in various situations. Property Description Take Damage Played when player take damage. Velocity Damage Played when player take damage from velocity (falling, hitting, ect.) . Death Played when player is die. Heartbeat/Start Starting from what value, start playing sound. Heartbeat/Rate Play sound rate (in seconds). Heartbeat/Sound Heartbeat sound. Velocity Damage Properties The player can take damage from the speed of physical contact with other physical objects. Property Description Damage The amount of damage that will be dealt in a collision in the specified range. Min Velocity Minimum velocity of collision. Max Velocity Maximum velocity of collision. Configuration Velocity Damage Use + button to add property. Use - button to remove property. Click on the Max Velocity label to edit the maximum possible velocity value. Events Event Description On Take Damage Event() Called when player take damage. OnWakeUp Event() Called when player wake up after die. OnDeath Event() Called when player die. Tip These events are convenient for calling other functions, without having to write code.","title":"Health System"},{"location":"player_section/health-system/#overview","text":"Player controller health system handled by FPHealth component. Property Description Health Actual player controller health points. Ranged between (Min Health - Max Health) proeprties. Min Health Limit the minimum possible health of the player controller. Ranged between (0 - Max Health)*. Max Health Limit the maximum possible health points of the player controller. Ranged between (Min Health - \u221e). Note The player dies when their health reaches 0. When you limit a player's Min Health property to a value greater than 0, you make them immortal. This is useful when you want to give a player a buff or something like that (For example like in Unreal Tournament, Quake, ect.) .","title":"Overview"},{"location":"player_section/health-system/#regeneration-properties","text":"Regeneration system automatically recover health points, after player controller take damage. Property Description Rate Speed of recovery of health points (in seconds) . Value How much health point add each rate. Delay Delay time before start recover health, after player take damage (in seconds) .","title":"Regeneration Properties"},{"location":"player_section/health-system/#sound-effects","text":"Sound effects that are played in various situations. Property Description Take Damage Played when player take damage. Velocity Damage Played when player take damage from velocity (falling, hitting, ect.) . Death Played when player is die. Heartbeat/Start Starting from what value, start playing sound. Heartbeat/Rate Play sound rate (in seconds). Heartbeat/Sound Heartbeat sound.","title":"Sound Effects"},{"location":"player_section/health-system/#velocity-damage-properties","text":"The player can take damage from the speed of physical contact with other physical objects. Property Description Damage The amount of damage that will be dealt in a collision in the specified range. Min Velocity Minimum velocity of collision. Max Velocity Maximum velocity of collision. Configuration Velocity Damage Use + button to add property. Use - button to remove property. Click on the Max Velocity label to edit the maximum possible velocity value.","title":"Velocity Damage Properties"},{"location":"player_section/health-system/#events","text":"Event Description On Take Damage Event() Called when player take damage. OnWakeUp Event() Called when player wake up after die. OnDeath Event() Called when player die. Tip These events are convenient for calling other functions, without having to write code.","title":"Events"},{"location":"player_section/input-manager/","text":"Overview Input Mapping is a button map that a player uses to move around and perform various actions, such as shooting reloading, jumping, accelerating, etc. Input Mapping allows you to change the buttons, both in the editor and directly during the game or in the game menu. You can create different maps for different platforms. Each player has a Input Controller component on which to add Input Mapping . During the game, the Input Controller processes the Input Mapping . Create Input Mapping You can create a new map in two ways. Through the Asset Menu, this is the standard Unity menu, called right click in the project window. Through the Aurora Manager window. Method 1 Go to the folder in which you want to create the map Right click and follow this path Create / Aurora FPS / Mapping / Input / Default After this created map will appear in the root folder. Method 2 Open Aurora Manager window, go to the top tabs: Aurora FPS/Aurora Manager Choose Mapping Asset section. From the Mapping Type list, select Default Input Mapping . After that, all the input mapping assets that are in the project will be displayed. You can choose any of them and based on them create a new one by pressing the Duplicate button. This action will create a new map based on the map you have selected. The new map will have all the buttons that were contained in the parent map. This is convenient when you have configured a specific card and want to create a new one based on it, for example, for another platform or device. Edit Input Mapping Choose Input Mapping asset which you want to configure in project window and double click it. Note If you want to edit Input Mappping asset that used by your player. Find it on Input Manager compoennt in player prefab and double click it. After double click in the Inspector window will be open Input Mapping . For example lets change Sprint button Find Sprint in Buttons section and expand it. Change KeyCode value on any desired key. After this player will be sprinting by your setted key. Note All created maps contain default inputs, these are inputs that are used by the system. The default inputs can only be read and edited, but cannot be deleted. You can create your own custom inputs that you can edit, delete and call through the API. Warning The values contained in the Axes section are numerical values in the range -1 to 1. All values must be created in the standard Unity Input Manager (this applies only to the Axes properties) . Add Custom Input To add your button or axis, click Add Property , a small window will open in which you need to enter the key by which this button or axis will be called. Then click Apply the property will be created in the map. With this key, you can call the created property through the API.","title":"Input Manager"},{"location":"player_section/input-manager/#overview","text":"Input Mapping is a button map that a player uses to move around and perform various actions, such as shooting reloading, jumping, accelerating, etc. Input Mapping allows you to change the buttons, both in the editor and directly during the game or in the game menu. You can create different maps for different platforms. Each player has a Input Controller component on which to add Input Mapping . During the game, the Input Controller processes the Input Mapping .","title":"Overview"},{"location":"player_section/input-manager/#create-input-mapping","text":"You can create a new map in two ways. Through the Asset Menu, this is the standard Unity menu, called right click in the project window. Through the Aurora Manager window. Method 1 Go to the folder in which you want to create the map Right click and follow this path Create / Aurora FPS / Mapping / Input / Default After this created map will appear in the root folder. Method 2 Open Aurora Manager window, go to the top tabs: Aurora FPS/Aurora Manager Choose Mapping Asset section. From the Mapping Type list, select Default Input Mapping . After that, all the input mapping assets that are in the project will be displayed. You can choose any of them and based on them create a new one by pressing the Duplicate button. This action will create a new map based on the map you have selected. The new map will have all the buttons that were contained in the parent map. This is convenient when you have configured a specific card and want to create a new one based on it, for example, for another platform or device.","title":"Create Input Mapping"},{"location":"player_section/input-manager/#edit-input-mapping","text":"Choose Input Mapping asset which you want to configure in project window and double click it. Note If you want to edit Input Mappping asset that used by your player. Find it on Input Manager compoennt in player prefab and double click it. After double click in the Inspector window will be open Input Mapping . For example lets change Sprint button Find Sprint in Buttons section and expand it. Change KeyCode value on any desired key. After this player will be sprinting by your setted key. Note All created maps contain default inputs, these are inputs that are used by the system. The default inputs can only be read and edited, but cannot be deleted. You can create your own custom inputs that you can edit, delete and call through the API. Warning The values contained in the Axes section are numerical values in the range -1 to 1. All values must be created in the standard Unity Input Manager (this applies only to the Axes properties) .","title":"Edit Input Mapping"},{"location":"player_section/input-manager/#add-custom-input","text":"To add your button or axis, click Add Property , a small window will open in which you need to enter the key by which this button or axis will be called. Then click Apply the property will be created in the map. With this key, you can call the created property through the API.","title":"Add Custom Input"},{"location":"player_section/loot-system/","text":"Loot Object System Player controller loot object system handled by LootObjectSystem component. Property Description Search Point Point from casting ray to search loot object. Search Distance Casting max distance to search loot object. HUDManager Player HUD manager. Culling Layer Casting loot objects culling layer. Advanced Settings/Search Rate How many times per frame to search for an object.\\nThe higher the value, the less often the check. Warning Search Rate: Searching too often can slow performance on weak devices. Create Loot Object Open Aurora Manager window, go to the top tabs: Aurora FPS/Aurora Manager Choose Loot Object section: Interactive Object/Loot Object Property Description Template Weapon: Lootable weapon. Ammo: Lootable ammunition for weapon. Health Kit: Lootable health kit for player. Name Loot object name. Layer Loot object layer. By default used Interactive Object layer. Count How much instance count create. Override Override template meshes. (It may differ depending on the template) Note You can add aditional components to loot object instance (s) . Also you can add it later. After complete configuration click Create button. Configurate Loot Object Property Description Mesh Child gameObject with mesh (s) . Loot Properties/Loot Mode KeyCode: Loot object will be looted after pressed specific key. Auto: Loot object will be looted autoatically after object become visible. Loot Properties/Loot Key Key to loot. (If selected KeyCode loot mode) Loot Properties/Allow Multiplie Loot object can be looted again after specific time. Loot Properties/Default Message This message will be displayed on HUD, whem loot object can be looted. Loot Properties/Alternative Message This message will be displayed on HUD, whem loot object can not be looted. (differ depending of loot object type, for example if ammo is full) Loot Properties/Loot Sound This sound will be played when object become looted.","title":"Loot System"},{"location":"player_section/loot-system/#loot-object-system","text":"Player controller loot object system handled by LootObjectSystem component. Property Description Search Point Point from casting ray to search loot object. Search Distance Casting max distance to search loot object. HUDManager Player HUD manager. Culling Layer Casting loot objects culling layer. Advanced Settings/Search Rate How many times per frame to search for an object.\\nThe higher the value, the less often the check. Warning Search Rate: Searching too often can slow performance on weak devices.","title":"Loot Object System"},{"location":"player_section/loot-system/#create-loot-object","text":"Open Aurora Manager window, go to the top tabs: Aurora FPS/Aurora Manager Choose Loot Object section: Interactive Object/Loot Object Property Description Template Weapon: Lootable weapon. Ammo: Lootable ammunition for weapon. Health Kit: Lootable health kit for player. Name Loot object name. Layer Loot object layer. By default used Interactive Object layer. Count How much instance count create. Override Override template meshes. (It may differ depending on the template) Note You can add aditional components to loot object instance (s) . Also you can add it later. After complete configuration click Create button.","title":"Create Loot Object"},{"location":"player_section/loot-system/#configurate-loot-object","text":"Property Description Mesh Child gameObject with mesh (s) . Loot Properties/Loot Mode KeyCode: Loot object will be looted after pressed specific key. Auto: Loot object will be looted autoatically after object become visible. Loot Properties/Loot Key Key to loot. (If selected KeyCode loot mode) Loot Properties/Allow Multiplie Loot object can be looted again after specific time. Loot Properties/Default Message This message will be displayed on HUD, whem loot object can be looted. Loot Properties/Alternative Message This message will be displayed on HUD, whem loot object can not be looted. (differ depending of loot object type, for example if ammo is full) Loot Properties/Loot Sound This sound will be played when object become looted.","title":"Configurate Loot Object"},{"location":"player_section/remote-body/","text":"First Person Body Choose Player gameobject or prefab. Add desired body inside player gameobject as child. Warning Body must be configured as Humanoid ! Add following components to first person body gameobject. Animator Remote Body Add Ranged Controller animator controller in Animator component. Add body Avatar in Animator component if is empty (You can find it if expand body mesh prefab) . Remote Body This component reads the necessary information and passes it to the animator controller. Body Property Description Controller Player first person controller references. Default Height First person body height relative Y axis while controller in stay state. Crouch Height First person body height relative Y axis while controller in crouching state. Animator Parameter Description Speed Animator controller parameter name to which the vertical speed value of the player controller will be passed. Typeof(float) Direction Animator controller parameter name to which the horizontal speed value of the player controller will be passed. Typeof(float) IsCrouching Animator controller parameter name to which the crouching value of the player controller will be passed. Typeof(bool) IsGrounded Animator controller parameter name to which the grounded value of the player controller will be passed. Typeof(bool) Velocity Smooth Frequency of synchronization of the player controller values and animator values. UI Element Description Find all available parameters from attached Animator Controller Override Animations Create new Animator Override Controller . In animator override controller, in Controller field add animator controller that used in your first person body Animator component. Override animations. Replace animator controller that used in your first person body Animator component on created animator override controller. Custom Animator Controller Create new animator controller . Open it and add parameters as in Remote Body component. Add your custom animator controller in Animator component. Note The parameter names in the animator controller must match the names in the Remote Body component.","title":"FPS Body"},{"location":"player_section/remote-body/#first-person-body","text":"Choose Player gameobject or prefab. Add desired body inside player gameobject as child. Warning Body must be configured as Humanoid ! Add following components to first person body gameobject. Animator Remote Body Add Ranged Controller animator controller in Animator component. Add body Avatar in Animator component if is empty (You can find it if expand body mesh prefab) .","title":"First Person Body"},{"location":"player_section/remote-body/#remote-body","text":"This component reads the necessary information and passes it to the animator controller. Body Property Description Controller Player first person controller references. Default Height First person body height relative Y axis while controller in stay state. Crouch Height First person body height relative Y axis while controller in crouching state. Animator Parameter Description Speed Animator controller parameter name to which the vertical speed value of the player controller will be passed. Typeof(float) Direction Animator controller parameter name to which the horizontal speed value of the player controller will be passed. Typeof(float) IsCrouching Animator controller parameter name to which the crouching value of the player controller will be passed. Typeof(bool) IsGrounded Animator controller parameter name to which the grounded value of the player controller will be passed. Typeof(bool) Velocity Smooth Frequency of synchronization of the player controller values and animator values. UI Element Description Find all available parameters from attached Animator Controller","title":"Remote Body"},{"location":"player_section/remote-body/#override-animations","text":"Create new Animator Override Controller . In animator override controller, in Controller field add animator controller that used in your first person body Animator component. Override animations. Replace animator controller that used in your first person body Animator component on created animator override controller.","title":"Override Animations"},{"location":"player_section/remote-body/#custom-animator-controller","text":"Create new animator controller . Open it and add parameters as in Remote Body component. Add your custom animator controller in Animator component. Note The parameter names in the animator controller must match the names in the Remote Body component.","title":"Custom Animator Controller"},{"location":"player_section/Player-controller/","text":"Create Controller Open Aurora Manager window, go to the top tabs: Aurora FPS/Aurora Manager Choose Player section: General/Player Property Description Template Advanced Player Player: This is a player that already contains preset weapons and the body of a character with animations. Simple Player Player: This is a lightweight clean player that only has all the necessary components. Weapons and bodies are not preset. (Suitable when you want to customize the player ndependently) Input Mapping Map with buttons on which the player will move. The asset already has a pre-installed Input Mapping which is called Standalone Input Mapping . you can select it from the list or create your own unique one. Optional Components You can also add various optional components to the player if desired (depending on the template , some of the optional components may already be pre- installed in the default player) . After complete configuration click Create button. Configure Controller First person Player controller handled by FPRController component. Base Properties Property Description Camera Instance Camera instance transform. FPCamera First person camera pivot transform (Parent gameobject of camera instance). Sensitivity X Look sensitivity by X(Horizontal) axis. Sensitivity Y Look sensitivity by Y(Vertical) axis. Limits Y Minimum Y(Vertical) look direction. Maximum Y(Vertical) look direction. Position Smooth Position smooth value. Rotation Smooth Rotation smooth value. Limits Y Clamp Vertical Rotation. Bobbing Properties Camera shaking while moving and jumping. Property Description HeadBob/Settings Asset file with head bob settings. HeadBob/Use Head Bob If true head bob will be processed. Otherwise false. Jump Bob/Duration Jump bob duration. Jump Bob/Amount Jump bob amount. Jump Bob/Use Jump Bob If true jump bob will be processed. Otherwise false. Field Of View Kick Field of view processing when player start sprinting. Property Description FOV Value Increase field of view value. Increase Speed Increase speed to kick field of view value. Decrease Speed Decrease speed to default field of view value. Zoom Properties Field of view processing when player start zooming. Property Description Handle Type Hold: Zoom processing while zoom input pressed. Trigger: Zoom processing when zoom input pressed once, and stop processing zoom input pressed again. Increase Speed Speed to zoom field of view value. Decrease Speed Speed to default field of view value. Swaying Properties Swaying camera to the sides when player moving left or right. Property Description Amount Camera swaying amount (Max sway camera angle). Speed Swaying speed. Return Speed Return speed on default angle. Use Camera Sway If true camera sway will be processed. Otherwise false. Tilts Properties Swaying camera to the sides when player moving left or right. Property Description Output Tilt output value. Output Speed Speed tilt to output value. Angle Tilt angle value. Angle Speed Speed tilt to target angle. Movement Properties Mode Description Velocity Instant change of speed to the required value from the start of movement, a more arcade and dynamic style of play, as it was in the games Quake or Unreal Tournament. Add Force Smoothly changes the speed to the required value, taking into account the mass, a more realistic style of play in comparison with Velocity mode. Speed Properties Property Description Walk Speed Speed while active walking state. Run Speed Speed while active running state. Sprint Speed Speed while active sprinting state. Backward Persent How many percent of the current speed will be saved while moving backward. Side Persent How many percent of the current speed will be saved while moving on sides. Zoom Persent How many percent of the current speed will be saved while zoomming. Sprint Direction When moving in which directions the player can accelerate. Gradual Acceleration Gradual change movement speed. Idle - Walk - Run - Sprint For example: The player will only be able to go to the sprinting speed, when he reach the running speed. Step Offset Properties It's the handling of stairs and small ground obstacles. Property Description Max Height The maximum detection height of step. Check Range The maximum detection range of step. Smooth The speed at which the height changes when detected. Ground Properties Property Description Slope Modifier Speed modifier curve when moving along slope. Ground Distance Max distance to check ground. Stick Distance The maximum distance at which the player will be stick to the ground. Jump Properties Property Description Air Control Input: while the player is in air, control is controlled using the movement buttons. Camera: While the player is in air, the player moves in the direction of the camera. Force Jump force. Speed Movement speed while player is in air. Max Jump Count Max available jump count. Suitable for games like Quake or Unreal Tournament. Multiple Jump Force Jump force when the player jumps more than once. Crouch Properties Property Description Handle Type Hold: Required to hold button for still crouching. Trigger: Required to press button for crouching and press againg to stand. Speed Movement speed while crouching. Crouch Speed The speed of change of the size of the Collider. Height Controller height while crouching. Climb Properties Property Description Climb Movement Free: Controller can move on any directions. Vertical: Controller can only move vertically. Speed Controller speed while climbing. Camera Lock Lock camera rotation while climbing. Sound Properties/Rate Rate of play climb sound while controller climbing. Sound Properties/Sound Sound instance. Advanced Properties/Check Rate The rate with which the climbable object will be checked in front of the player. Advanced Properties/Culling Layer Limit the check climbable objects in these layers. Controller Events Event Description OnEnable Event() Called when controller become enabled. OnDisable Event() Called when controller become disabled. OnGrounded Event() Called when controller become grounded. Tip These events are convenient for calling other functions, without having to write code.","title":"Player Controller"},{"location":"player_section/Player-controller/#create-controller","text":"Open Aurora Manager window, go to the top tabs: Aurora FPS/Aurora Manager Choose Player section: General/Player Property Description Template Advanced Player Player: This is a player that already contains preset weapons and the body of a character with animations. Simple Player Player: This is a lightweight clean player that only has all the necessary components. Weapons and bodies are not preset. (Suitable when you want to customize the player ndependently) Input Mapping Map with buttons on which the player will move. The asset already has a pre-installed Input Mapping which is called Standalone Input Mapping . you can select it from the list or create your own unique one. Optional Components You can also add various optional components to the player if desired (depending on the template , some of the optional components may already be pre- installed in the default player) . After complete configuration click Create button.","title":"Create Controller"},{"location":"player_section/Player-controller/#configure-controller","text":"First person Player controller handled by FPRController component.","title":"Configure Controller"},{"location":"player_section/Player-controller/#base-properties","text":"Property Description Camera Instance Camera instance transform. FPCamera First person camera pivot transform (Parent gameobject of camera instance). Sensitivity X Look sensitivity by X(Horizontal) axis. Sensitivity Y Look sensitivity by Y(Vertical) axis. Limits Y Minimum Y(Vertical) look direction. Maximum Y(Vertical) look direction. Position Smooth Position smooth value. Rotation Smooth Rotation smooth value. Limits Y Clamp Vertical Rotation.","title":"Base Properties"},{"location":"player_section/Player-controller/#bobbing-properties","text":"Camera shaking while moving and jumping. Property Description HeadBob/Settings Asset file with head bob settings. HeadBob/Use Head Bob If true head bob will be processed. Otherwise false. Jump Bob/Duration Jump bob duration. Jump Bob/Amount Jump bob amount. Jump Bob/Use Jump Bob If true jump bob will be processed. Otherwise false.","title":"Bobbing Properties"},{"location":"player_section/Player-controller/#field-of-view-kick","text":"Field of view processing when player start sprinting. Property Description FOV Value Increase field of view value. Increase Speed Increase speed to kick field of view value. Decrease Speed Decrease speed to default field of view value.","title":"Field Of View Kick"},{"location":"player_section/Player-controller/#zoom-properties","text":"Field of view processing when player start zooming. Property Description Handle Type Hold: Zoom processing while zoom input pressed. Trigger: Zoom processing when zoom input pressed once, and stop processing zoom input pressed again. Increase Speed Speed to zoom field of view value. Decrease Speed Speed to default field of view value.","title":"Zoom Properties"},{"location":"player_section/Player-controller/#swaying-properties","text":"Swaying camera to the sides when player moving left or right. Property Description Amount Camera swaying amount (Max sway camera angle). Speed Swaying speed. Return Speed Return speed on default angle. Use Camera Sway If true camera sway will be processed. Otherwise false.","title":"Swaying Properties"},{"location":"player_section/Player-controller/#tilts-properties","text":"Swaying camera to the sides when player moving left or right. Property Description Output Tilt output value. Output Speed Speed tilt to output value. Angle Tilt angle value. Angle Speed Speed tilt to target angle.","title":"Tilts Properties"},{"location":"player_section/Player-controller/#movement-properties","text":"Mode Description Velocity Instant change of speed to the required value from the start of movement, a more arcade and dynamic style of play, as it was in the games Quake or Unreal Tournament. Add Force Smoothly changes the speed to the required value, taking into account the mass, a more realistic style of play in comparison with Velocity mode.","title":"Movement Properties"},{"location":"player_section/Player-controller/#speed-properties","text":"Property Description Walk Speed Speed while active walking state. Run Speed Speed while active running state. Sprint Speed Speed while active sprinting state. Backward Persent How many percent of the current speed will be saved while moving backward. Side Persent How many percent of the current speed will be saved while moving on sides. Zoom Persent How many percent of the current speed will be saved while zoomming. Sprint Direction When moving in which directions the player can accelerate. Gradual Acceleration Gradual change movement speed. Idle - Walk - Run - Sprint For example: The player will only be able to go to the sprinting speed, when he reach the running speed.","title":"Speed Properties"},{"location":"player_section/Player-controller/#step-offset-properties","text":"It's the handling of stairs and small ground obstacles. Property Description Max Height The maximum detection height of step. Check Range The maximum detection range of step. Smooth The speed at which the height changes when detected.","title":"Step Offset Properties"},{"location":"player_section/Player-controller/#ground-properties","text":"Property Description Slope Modifier Speed modifier curve when moving along slope. Ground Distance Max distance to check ground. Stick Distance The maximum distance at which the player will be stick to the ground.","title":"Ground Properties"},{"location":"player_section/Player-controller/#jump-properties","text":"Property Description Air Control Input: while the player is in air, control is controlled using the movement buttons. Camera: While the player is in air, the player moves in the direction of the camera. Force Jump force. Speed Movement speed while player is in air. Max Jump Count Max available jump count. Suitable for games like Quake or Unreal Tournament. Multiple Jump Force Jump force when the player jumps more than once.","title":"Jump Properties"},{"location":"player_section/Player-controller/#crouch-properties","text":"Property Description Handle Type Hold: Required to hold button for still crouching. Trigger: Required to press button for crouching and press againg to stand. Speed Movement speed while crouching. Crouch Speed The speed of change of the size of the Collider. Height Controller height while crouching.","title":"Crouch Properties"},{"location":"player_section/Player-controller/#climb-properties","text":"Property Description Climb Movement Free: Controller can move on any directions. Vertical: Controller can only move vertically. Speed Controller speed while climbing. Camera Lock Lock camera rotation while climbing. Sound Properties/Rate Rate of play climb sound while controller climbing. Sound Properties/Sound Sound instance. Advanced Properties/Check Rate The rate with which the climbable object will be checked in front of the player. Advanced Properties/Culling Layer Limit the check climbable objects in these layers.","title":"Climb Properties"},{"location":"player_section/Player-controller/#controller-events","text":"Event Description OnEnable Event() Called when controller become enabled. OnDisable Event() Called when controller become disabled. OnGrounded Event() Called when controller become grounded. Tip These events are convenient for calling other functions, without having to write code.","title":"Controller Events"},{"location":"weapon_section/bullet_item/","text":"Overview All shooting systems use Bullet Item as bullets . This is a type that contains basic information. Create Bullet Item Open Asset Menu by right click on project window. Go to the path: Create / Aurora FPS / Items / Bullet Configure Bullet Item Select Bullet Item asset to edit. In inspector window will be opened editor. Field Description ID Unique identifier, generated automatically. Can be edited manually (required property) . Name Name of the bullet (optional property) . Description Description of the bullet (optional property) . Image Sprite of the bullet (optional property) . Damage Damage caused by a bullet (required property) . Impulse The impulse that will be transmitted to the physical object when it is hit (optional property) . Balls Variance The number of produced fractions when fired, the default is 1 that means it's an ordinary bullet (optional property, suitable for shotgun bullet ) . Balls Numbers The strength of the spread of these fractions (optional property, suitable for shotgun bullet ) . Decal Mapping This is a map that contains sounds and traces of a given bullet hit on different surfaces. Drop Properties It contains the data of the object that will be thrown when the player throws the bullet.","title":"Bullet Item"},{"location":"weapon_section/bullet_item/#overview","text":"All shooting systems use Bullet Item as bullets . This is a type that contains basic information.","title":"Overview"},{"location":"weapon_section/bullet_item/#create-bullet-item","text":"Open Asset Menu by right click on project window. Go to the path: Create / Aurora FPS / Items / Bullet","title":"Create Bullet Item"},{"location":"weapon_section/bullet_item/#configure-bullet-item","text":"Select Bullet Item asset to edit. In inspector window will be opened editor. Field Description ID Unique identifier, generated automatically. Can be edited manually (required property) . Name Name of the bullet (optional property) . Description Description of the bullet (optional property) . Image Sprite of the bullet (optional property) . Damage Damage caused by a bullet (required property) . Impulse The impulse that will be transmitted to the physical object when it is hit (optional property) . Balls Variance The number of produced fractions when fired, the default is 1 that means it's an ordinary bullet (optional property, suitable for shotgun bullet ) . Balls Numbers The strength of the spread of these fractions (optional property, suitable for shotgun bullet ) . Decal Mapping This is a map that contains sounds and traces of a given bullet hit on different surfaces. Drop Properties It contains the data of the object that will be thrown when the player throws the bullet.","title":"Configure Bullet Item"},{"location":"weapon_section/first-person-weapon/","text":"Create First Person Weapon Open Aurora Manager window, go to the top tabs: Aurora FPS / Aurora Manager Choose Player section: General / Weapon Configure weapon desired weapon. Property Description Template Select the type of weapon that is closest to the weapon you want to create. Created weapons will already have animations related to this type, but you can always replace them with your own if you want. Shooting System Raycast: lightweight shooting system, does not require large costs on computer resources, shoots a physical ray. Physics: realistic shooting system that shoots bullets, each of which is processed individually in physics. More demanding on resources (optimized through the use of built- in object pool system). Weapon Item Weapon Item asset for this weapon. Bullet Item Type of bullet that the weapon will use for fire. Override Contains objects (mesh) to override, depending on the template they can vary. When you redefine these objects, you replace the standard objects on new ones , this is a kind of auto retargeting and built- in animations will work on your created weapons. Optional Components You can also add various optional components to the weapon if desired (depending on the template , some of the optional components may already be pre-installed in the weapon) . Press button, after this new weapon will be created at the scene. Make created weapon as Player camera child. Player / FPCamera / CameraInstance . Disable weapon gameobject. Weapon Identifier Weapon Identifier component used for detecting weapon reference by FPInvetory component. Property Description Weapon Item Weapon item asset for this weapon. Animation System Weapon animation system handled by Weapon Animation System component. Transform Position Property Description Default Position Position of this weapon gameobject relative camera instance gameobject. Will be automatically applyed to Transform component when start game. Default Rotation Rotation of this weapon gameobject relative camera instance gameobject. Will be automatically applyed to Transform component when start game. UI Element Description Copy position/rotation value from Transform component and paste. Paste position/rotation value to Transform component. Take In/Out Time Property Description Take In Time to take in weapon from invetory. Take Out Time take out weapon in inventory. UI Element Description Show all available parameters from attached Animator Controller and paste selected. Animator Parameters Property Description Speed Animator controller parameter name to which the vertical speed value of the player controller will be passed. Typeof(float) Direction Animator controller parameter name to which the horizontal speed value of the player controller will be passed. Typeof(float) IsCrouching Animator controller parameter name to which the crouching value of the player controller will be passed. Typeof(bool) IsGrounded Animator controller parameter name to which the grounded value of the player controller will be passed. Typeof(bool) Speed Blend Time Frequency of synchronization of the player controller values and animator values. UI Element Description Show all available parameters from attached Animator Controller and paste selected. Sway Properties Position Property Description Sensitivity Sensitivity of the mouse sway. Limit Sway position limit. Smooth Smooth value for position sway. Rotation Property Description Sensitivity Sensitivity of the mouse sway. Limit Sway rotation limit. Smooth Smooth value for rotation sway. Vertical Property Description Sensitivity Sensitivity vertcal sway. Invert Invert vertical weapon rotation. Smooth Smooth value for position sway. Ray Shooting System Ray shooting system used Raycast for shoot, this system handled by Weapon Ray Shooting System component. Ray Shooting Properties Property Description Fire Mode Mute: Shooting disabled. Single: Single fire. Queue: Fire with fixed queue (for example 3 fire). Free: Free fire without restrictions. Fire Point The point from which the shot will be fired. If you leave the field empty, a point will be created automatically at the start of the game and centered on the center of the screen. Bullet Item Bullet item asset. Fire Rate Rate of fire mode. You can edit fire rate for each mode. For this switch fire mode and edit this property, value will be saved automatically. Fire Range Max range of raycast. Impulse Amplifier Additional impulse for the bullet. Every bullet item asset has a impulse applied to a physical object in a collision. Weapon can add additional impulse to the bullet, since the same bullet can be used in different weapons, for example assault rifle and sniper rifle, but both of this weapons shoot with different impulse. Culling Layer Objects with which layers will be processed when fired. Fire Sounds Array Description Normal Sounds Sounds in this array will be played randomly when weapon is shoot. Dry Sounds Sounds in this array will be played randomly when bullets is empty and weapon trying to shoot. Fire Effects Array Description Effect List Particle System effects that, will be simulated when weapon shooting.","title":"First Person Weapon"},{"location":"weapon_section/first-person-weapon/#create-first-person-weapon","text":"Open Aurora Manager window, go to the top tabs: Aurora FPS / Aurora Manager Choose Player section: General / Weapon Configure weapon desired weapon. Property Description Template Select the type of weapon that is closest to the weapon you want to create. Created weapons will already have animations related to this type, but you can always replace them with your own if you want. Shooting System Raycast: lightweight shooting system, does not require large costs on computer resources, shoots a physical ray. Physics: realistic shooting system that shoots bullets, each of which is processed individually in physics. More demanding on resources (optimized through the use of built- in object pool system). Weapon Item Weapon Item asset for this weapon. Bullet Item Type of bullet that the weapon will use for fire. Override Contains objects (mesh) to override, depending on the template they can vary. When you redefine these objects, you replace the standard objects on new ones , this is a kind of auto retargeting and built- in animations will work on your created weapons. Optional Components You can also add various optional components to the weapon if desired (depending on the template , some of the optional components may already be pre-installed in the weapon) . Press button, after this new weapon will be created at the scene. Make created weapon as Player camera child. Player / FPCamera / CameraInstance . Disable weapon gameobject.","title":"Create First Person Weapon"},{"location":"weapon_section/first-person-weapon/#weapon-identifier","text":"Weapon Identifier component used for detecting weapon reference by FPInvetory component. Property Description Weapon Item Weapon item asset for this weapon.","title":"Weapon Identifier"},{"location":"weapon_section/first-person-weapon/#animation-system","text":"Weapon animation system handled by Weapon Animation System component.","title":"Animation System"},{"location":"weapon_section/first-person-weapon/#transform-position","text":"Property Description Default Position Position of this weapon gameobject relative camera instance gameobject. Will be automatically applyed to Transform component when start game. Default Rotation Rotation of this weapon gameobject relative camera instance gameobject. Will be automatically applyed to Transform component when start game. UI Element Description Copy position/rotation value from Transform component and paste. Paste position/rotation value to Transform component.","title":"Transform Position"},{"location":"weapon_section/first-person-weapon/#take-inout-time","text":"Property Description Take In Time to take in weapon from invetory. Take Out Time take out weapon in inventory. UI Element Description Show all available parameters from attached Animator Controller and paste selected.","title":"Take In/Out Time"},{"location":"weapon_section/first-person-weapon/#animator-parameters","text":"Property Description Speed Animator controller parameter name to which the vertical speed value of the player controller will be passed. Typeof(float) Direction Animator controller parameter name to which the horizontal speed value of the player controller will be passed. Typeof(float) IsCrouching Animator controller parameter name to which the crouching value of the player controller will be passed. Typeof(bool) IsGrounded Animator controller parameter name to which the grounded value of the player controller will be passed. Typeof(bool) Speed Blend Time Frequency of synchronization of the player controller values and animator values. UI Element Description Show all available parameters from attached Animator Controller and paste selected.","title":"Animator Parameters"},{"location":"weapon_section/first-person-weapon/#sway-properties","text":"Position Property Description Sensitivity Sensitivity of the mouse sway. Limit Sway position limit. Smooth Smooth value for position sway. Rotation Property Description Sensitivity Sensitivity of the mouse sway. Limit Sway rotation limit. Smooth Smooth value for rotation sway. Vertical Property Description Sensitivity Sensitivity vertcal sway. Invert Invert vertical weapon rotation. Smooth Smooth value for position sway.","title":"Sway Properties"},{"location":"weapon_section/first-person-weapon/#ray-shooting-system","text":"Ray shooting system used Raycast for shoot, this system handled by Weapon Ray Shooting System component.","title":"Ray Shooting System"},{"location":"weapon_section/first-person-weapon/#ray-shooting-properties","text":"Property Description Fire Mode Mute: Shooting disabled. Single: Single fire. Queue: Fire with fixed queue (for example 3 fire). Free: Free fire without restrictions. Fire Point The point from which the shot will be fired. If you leave the field empty, a point will be created automatically at the start of the game and centered on the center of the screen. Bullet Item Bullet item asset. Fire Rate Rate of fire mode. You can edit fire rate for each mode. For this switch fire mode and edit this property, value will be saved automatically. Fire Range Max range of raycast. Impulse Amplifier Additional impulse for the bullet. Every bullet item asset has a impulse applied to a physical object in a collision. Weapon can add additional impulse to the bullet, since the same bullet can be used in different weapons, for example assault rifle and sniper rifle, but both of this weapons shoot with different impulse. Culling Layer Objects with which layers will be processed when fired.","title":"Ray Shooting Properties"},{"location":"weapon_section/first-person-weapon/#fire-sounds","text":"Array Description Normal Sounds Sounds in this array will be played randomly when weapon is shoot. Dry Sounds Sounds in this array will be played randomly when bullets is empty and weapon trying to shoot.","title":"Fire Sounds"},{"location":"weapon_section/first-person-weapon/#fire-effects","text":"Array Description Effect List Particle System effects that, will be simulated when weapon shooting.","title":"Fire Effects"},{"location":"weapon_section/weapon_item/","text":"Overview Each weapon has its own unique identifier. It describes basic information about weapons. When creating a completely new type of weapon, you must create a unique identifier for it, which the system will use to identify it. Create Weapon Item Open Asset Menu by right click on project window. Go to the path: Create / Aurora FPS / Items / Weapon Configure Weapon Item Select Weapon Item asset to edit. In inspector window will be opened editor. Field Description ID Unique identifier, generated automatically. Can be edited manually (required property) . Name Name of the weapon, will be displayed on HUD (optional property) . Description Description of the weapon (optional property) . Image Sprite of the weapon will be displayed on HUD (optional property) . Group Each weapon must have a group that it belongs to, it will be sorted by this group in the inventory, you can set any group name you want. For example Assault Rifle or Sniper Rifle group name can be named Rifles (required property) . Drop Properties It contains the data of the object that will be thrown when the player throws the weapon.","title":"Weapon Item"},{"location":"weapon_section/weapon_item/#overview","text":"Each weapon has its own unique identifier. It describes basic information about weapons. When creating a completely new type of weapon, you must create a unique identifier for it, which the system will use to identify it.","title":"Overview"},{"location":"weapon_section/weapon_item/#create-weapon-item","text":"Open Asset Menu by right click on project window. Go to the path: Create / Aurora FPS / Items / Weapon","title":"Create Weapon Item"},{"location":"weapon_section/weapon_item/#configure-weapon-item","text":"Select Weapon Item asset to edit. In inspector window will be opened editor. Field Description ID Unique identifier, generated automatically. Can be edited manually (required property) . Name Name of the weapon, will be displayed on HUD (optional property) . Description Description of the weapon (optional property) . Image Sprite of the weapon will be displayed on HUD (optional property) . Group Each weapon must have a group that it belongs to, it will be sorted by this group in the inventory, you can set any group name you want. For example Assault Rifle or Sniper Rifle group name can be named Rifles (required property) . Drop Properties It contains the data of the object that will be thrown when the player throws the weapon.","title":"Configure Weapon Item"}]}