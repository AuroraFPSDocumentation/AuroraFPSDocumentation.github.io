{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Aurora FPS Documentation Aurora FPS is the best solution for any FPS game. This is the most powerful asset that implements the most advanced and unique systems and features for creating AAA games for any platform: PC, console, mobile, etc. Aurora FPS is suitable for any developer, both for beginners and experienced users, or for large professional teams. For this asset created powerful and unique editor, which allows you to configure any system for yourself and for any type of the game. Also Aurora FPS has a very useful and detailed Documentation and API. Helpful Links API Videos Discord Forum Twitter Demo","title":"Home"},{"location":"#welcome-to-aurora-fps-documentation","text":"Aurora FPS is the best solution for any FPS game. This is the most powerful asset that implements the most advanced and unique systems and features for creating AAA games for any platform: PC, console, mobile, etc. Aurora FPS is suitable for any developer, both for beginners and experienced users, or for large professional teams. For this asset created powerful and unique editor, which allows you to configure any system for yourself and for any type of the game. Also Aurora FPS has a very useful and detailed Documentation and API.","title":"Welcome to Aurora FPS Documentation"},{"location":"#helpful-links","text":"API Videos Discord Forum Twitter Demo","title":"Helpful Links"},{"location":"getting-started/","text":"Import Project After you downloaded the project press Import button. The project is fully configured, you don't need to make any configurations after importing it. Note Project Settings will be overrided (Tags and Layers) It is possible for Unity to offer you automatic download of dependencies (ProBuilder). Aurora FPS was used ProBuilder to create a demo scene, you can refuse to download it or delete it later. Demo Scene For open demo scene go to path: Assets/Aurora FPS/Base Content/Scenes/Base Demo/Base Demo Scene","title":"Getting Started"},{"location":"getting-started/#import-project","text":"After you downloaded the project press Import button. The project is fully configured, you don't need to make any configurations after importing it. Note Project Settings will be overrided (Tags and Layers) It is possible for Unity to offer you automatic download of dependencies (ProBuilder). Aurora FPS was used ProBuilder to create a demo scene, you can refuse to download it or delete it later.","title":"Import Project"},{"location":"getting-started/#demo-scene","text":"For open demo scene go to path: Assets/Aurora FPS/Base Content/Scenes/Base Demo/Base Demo Scene","title":"Demo Scene"},{"location":"player_section/footstep-system/","text":"Overview Aurora FPS has an advanced step sound system. You can configure what sounds will be played when moving on a specific surface. All sounds that the player plays are contained in the Footstep Mapping asset. You can create an unlimited number of these files and register various sounds there. The system supports processing sounds relative to the physical material and texture of Terrain. Create Footstep Mappping Method 1 1. Go to the folder in which you want to create the map. 2. Right-click and follow this path. Create / Aurora FPS / Mapping / Player / Footstep Method 2 1. Open Aurora Manager window. Aurora FPS / Aurora Manager 2. Choose Mapping Asset section. 3. From the Mapping Type list, select Footstep Mapping . After that, all the input mapping assets that are in the project will be displayed. You can choose any of them and based on them create a new one by pressing the Duplicate button. This action will create a new map based on the map you have selected. The new map will have all the buttons that were contained in the parent map. This is convenient when you have configured a specific card and want to create a new one based on it, for example, for another platform or device. Note Don't forget to add the created map to your player. Find (add if is not added) FPFootstepSoundSystem component and add your new map in Mapping field. Tip You can create unlimited Footstep Mapping asset in project, however only one map can be assigned to the player. If the game is divided into levels, it is likely that there may be different types of surfaces in different levels that are not in others. So to improve performance, you can create different maps for different levels , so that you don 't have to store all possible surfaces in one map and use it for the entire game. Configure Footstep Mapping Select the map you want to edit. Each property stores the sounds of a step, jump, and landing. They will only be played when the player is on a specific physical surface or terrain texture. You can add an unlimited number of sounds of steps, jumps and landings. As an example, two different types of properties are added to Footstep Mapping . Physics Material Property All types of colliders have the material property. This way you can create physical material for a specific type of object. The example uses the Pallet object, it has a Box Collider component, and the object consists of a tree. We created the Wood physical material for it and added in the Physics Material property in Box Collider component. We added the same Wood physical material to all other wooden objects. Property Description Key Physics material, on which these sounds will be played. Step Sounds array, that will be played when player moveing on the ground. Jump Sounds array, that will be played when player jumping. Land Sounds array, that will be played when player landing. Terrain Texture Property When you create a Terrain, you add different layers. Also you add the Diffuse texture to each layer. By this Diffuse texture system detect surface and play sounds. For example, we added a layer with a \"Grass Diffuse\" texture as the \"Diffuse\". This same texture was added to Footstep Mapping and defined there the sounds that will be played when moving, pressing and pressing on this texture. Property Description Key Texture, on which these sounds will be played. Step Sounds array, that will be played when player moveing on the ground. Jump Sounds array, that will be played when player jumping. Land Sounds array, that will be played when player landing. Add Footstep Property To add a new property, click on the Add Property button. Select the type of property you want to add. In the window that appears, insert the property (Physics Material / Texture) and click the Apply button.","title":"Footstep System"},{"location":"player_section/footstep-system/#overview","text":"Aurora FPS has an advanced step sound system. You can configure what sounds will be played when moving on a specific surface. All sounds that the player plays are contained in the Footstep Mapping asset. You can create an unlimited number of these files and register various sounds there. The system supports processing sounds relative to the physical material and texture of Terrain.","title":"Overview"},{"location":"player_section/footstep-system/#create-footstep-mappping","text":"Method 1 1. Go to the folder in which you want to create the map. 2. Right-click and follow this path. Create / Aurora FPS / Mapping / Player / Footstep Method 2 1. Open Aurora Manager window. Aurora FPS / Aurora Manager 2. Choose Mapping Asset section. 3. From the Mapping Type list, select Footstep Mapping . After that, all the input mapping assets that are in the project will be displayed. You can choose any of them and based on them create a new one by pressing the Duplicate button. This action will create a new map based on the map you have selected. The new map will have all the buttons that were contained in the parent map. This is convenient when you have configured a specific card and want to create a new one based on it, for example, for another platform or device. Note Don't forget to add the created map to your player. Find (add if is not added) FPFootstepSoundSystem component and add your new map in Mapping field. Tip You can create unlimited Footstep Mapping asset in project, however only one map can be assigned to the player. If the game is divided into levels, it is likely that there may be different types of surfaces in different levels that are not in others. So to improve performance, you can create different maps for different levels , so that you don 't have to store all possible surfaces in one map and use it for the entire game.","title":"Create Footstep Mappping"},{"location":"player_section/footstep-system/#configure-footstep-mapping","text":"Select the map you want to edit. Each property stores the sounds of a step, jump, and landing. They will only be played when the player is on a specific physical surface or terrain texture. You can add an unlimited number of sounds of steps, jumps and landings. As an example, two different types of properties are added to Footstep Mapping .","title":"Configure Footstep Mapping"},{"location":"player_section/footstep-system/#physics-material-property","text":"All types of colliders have the material property. This way you can create physical material for a specific type of object. The example uses the Pallet object, it has a Box Collider component, and the object consists of a tree. We created the Wood physical material for it and added in the Physics Material property in Box Collider component. We added the same Wood physical material to all other wooden objects. Property Description Key Physics material, on which these sounds will be played. Step Sounds array, that will be played when player moveing on the ground. Jump Sounds array, that will be played when player jumping. Land Sounds array, that will be played when player landing.","title":"Physics Material Property"},{"location":"player_section/footstep-system/#terrain-texture-property","text":"When you create a Terrain, you add different layers. Also you add the Diffuse texture to each layer. By this Diffuse texture system detect surface and play sounds. For example, we added a layer with a \"Grass Diffuse\" texture as the \"Diffuse\". This same texture was added to Footstep Mapping and defined there the sounds that will be played when moving, pressing and pressing on this texture. Property Description Key Texture, on which these sounds will be played. Step Sounds array, that will be played when player moveing on the ground. Jump Sounds array, that will be played when player jumping. Land Sounds array, that will be played when player landing.","title":"Terrain Texture Property"},{"location":"player_section/footstep-system/#add-footstep-property","text":"To add a new property, click on the Add Property button. Select the type of property you want to add. In the window that appears, insert the property (Physics Material / Texture) and click the Apply button.","title":"Add Footstep Property"},{"location":"player_section/health-system/","text":"Overview Player controller health system handled by FPHealth component. Base Properties Property Description Health Actual player controller health points. Ranged between (Min Health - Max Health) proeprties. Min Health Limit the minimum possible health of the player controller. Ranged between (0 - Max Health)*. Max Health Limit the maximum possible health points of the player controller. Ranged between (Min Health - \u221e). Note The player dies when their health reaches 0. When you limit a player's Min Health property to a value greater than 0, you make them immortal. This is useful when you want to give a player a buff or something like that (For example like in Unreal Tournament, Quake, ect.) . Regeneration Properties Regeneration system automatically recover health points, after player controller take damage. Property Description Rate Speed of recovery of health points (in seconds) . Value How much health point add each rate. Delay Delay time before start recover health, after player take damage (in seconds) . Sound Effects Sound effects that are played in various situations. Property Description Take Damage Played when player take damage. Velocity Damage Played when player take damage from velocity (falling, hitting, ect.) . Death Played when player is die. Heartbeat/Start Starting from what value, start playing sound. Heartbeat/Rate Play sound rate (in seconds). Heartbeat/Sound Heartbeat sound. Velocity Damage Properties The player can take damage from the speed of physical contact with other physical objects. Property Description Damage The amount of damage that will be dealt in a collision in the specified range. Min Velocity Minimum velocity of collision. Max Velocity Maximum velocity of collision. Configuration Velocity Damage Use + button to add property. Use - button to remove property. Click on the Max Velocity label to edit the maximum possible velocity value. Events Event Description On Take Damage Event() Called when player take damage. OnWakeUp Event() Called when player wake up after die. OnDeath Event() Called when player die. Tip These events are convenient for calling other functions, without having to write code.","title":"Health System"},{"location":"player_section/health-system/#overview","text":"Player controller health system handled by FPHealth component.","title":"Overview"},{"location":"player_section/health-system/#base-properties","text":"Property Description Health Actual player controller health points. Ranged between (Min Health - Max Health) proeprties. Min Health Limit the minimum possible health of the player controller. Ranged between (0 - Max Health)*. Max Health Limit the maximum possible health points of the player controller. Ranged between (Min Health - \u221e). Note The player dies when their health reaches 0. When you limit a player's Min Health property to a value greater than 0, you make them immortal. This is useful when you want to give a player a buff or something like that (For example like in Unreal Tournament, Quake, ect.) .","title":"Base Properties"},{"location":"player_section/health-system/#regeneration-properties","text":"Regeneration system automatically recover health points, after player controller take damage. Property Description Rate Speed of recovery of health points (in seconds) . Value How much health point add each rate. Delay Delay time before start recover health, after player take damage (in seconds) .","title":"Regeneration Properties"},{"location":"player_section/health-system/#sound-effects","text":"Sound effects that are played in various situations. Property Description Take Damage Played when player take damage. Velocity Damage Played when player take damage from velocity (falling, hitting, ect.) . Death Played when player is die. Heartbeat/Start Starting from what value, start playing sound. Heartbeat/Rate Play sound rate (in seconds). Heartbeat/Sound Heartbeat sound.","title":"Sound Effects"},{"location":"player_section/health-system/#velocity-damage-properties","text":"The player can take damage from the speed of physical contact with other physical objects. Property Description Damage The amount of damage that will be dealt in a collision in the specified range. Min Velocity Minimum velocity of collision. Max Velocity Maximum velocity of collision. Configuration Velocity Damage Use + button to add property. Use - button to remove property. Click on the Max Velocity label to edit the maximum possible velocity value.","title":"Velocity Damage Properties"},{"location":"player_section/health-system/#events","text":"Event Description On Take Damage Event() Called when player take damage. OnWakeUp Event() Called when player wake up after die. OnDeath Event() Called when player die. Tip These events are convenient for calling other functions, without having to write code.","title":"Events"},{"location":"player_section/input-manager/","text":"Overview Input Mapping is a button map that a player uses to move around and perform various actions, such as shooting reloading, jumping, accelerating, etc. Input Mapping allows you to change the buttons, both in the editor and directly during the game or in the game menu. You can create different maps for different platforms. Each player has a Input Controller component on which to add Input Mapping . During the game, the Input Controller processes the Input Mapping . Create Input Mapping You can create a new map in two ways. Through the Asset Menu, this is the standard Unity menu, called right click in the project window. Through the Aurora Manager window. Method 1 1. Go to the folder in which you want to create the map. 2. Right-click and follow this path. Create / Aurora FPS / Mapping / Input / Default 3. After this created map will appear in the root folder. Method 2 1. Open Aurora Manager window. Aurora FPS / Aurora Manager 2. Choose Mapping Asset section. From the Mapping Type list, select Default Input Mapping . After that, all the input mapping assets that are in the project will be displayed. You can choose any of them and based on them create a new one by pressing the Duplicate button. This action will create a new map based on the map you have selected. The new map will have all the buttons that were contained in the parent map. This is convenient when you have configured a specific card and want to create a new one based on it, for example, for another platform or device. Edit Input Mapping Choose Input Mapping asset which you want to configure in project window and double click it. Note If you want to edit Input Mappping asset that used by your player. Find it on Input Manager compoennt in player prefab and double click it. After double click in the Inspector window will be open Input Mapping . For example lets change Sprint button Find Sprint in Buttons section and expand it. Change KeyCode value on any desired key. After this player will be sprinting by your setted key. Note All created maps contain default inputs, these are inputs that are used by the system. The default inputs can only be read and edited, but cannot be deleted. You can create your own custom inputs that you can edit, delete and call through the API. Warning The values contained in the Axes section are numerical values in the range -1 to 1. All values must be created in the standard Unity Input Manager (this applies only to the Axes properties) . Add Custom Input To add your button or axis, click Add Property , a small window will open in which you need to enter the key by which this button or axis will be called. Then click Apply the property will be created in the map. With this key, you can call the created property through the API.","title":"Input Manager"},{"location":"player_section/input-manager/#overview","text":"Input Mapping is a button map that a player uses to move around and perform various actions, such as shooting reloading, jumping, accelerating, etc. Input Mapping allows you to change the buttons, both in the editor and directly during the game or in the game menu. You can create different maps for different platforms. Each player has a Input Controller component on which to add Input Mapping . During the game, the Input Controller processes the Input Mapping .","title":"Overview"},{"location":"player_section/input-manager/#create-input-mapping","text":"You can create a new map in two ways. Through the Asset Menu, this is the standard Unity menu, called right click in the project window. Through the Aurora Manager window. Method 1 1. Go to the folder in which you want to create the map. 2. Right-click and follow this path. Create / Aurora FPS / Mapping / Input / Default 3. After this created map will appear in the root folder. Method 2 1. Open Aurora Manager window. Aurora FPS / Aurora Manager 2. Choose Mapping Asset section. From the Mapping Type list, select Default Input Mapping . After that, all the input mapping assets that are in the project will be displayed. You can choose any of them and based on them create a new one by pressing the Duplicate button. This action will create a new map based on the map you have selected. The new map will have all the buttons that were contained in the parent map. This is convenient when you have configured a specific card and want to create a new one based on it, for example, for another platform or device.","title":"Create Input Mapping"},{"location":"player_section/input-manager/#edit-input-mapping","text":"Choose Input Mapping asset which you want to configure in project window and double click it. Note If you want to edit Input Mappping asset that used by your player. Find it on Input Manager compoennt in player prefab and double click it. After double click in the Inspector window will be open Input Mapping . For example lets change Sprint button Find Sprint in Buttons section and expand it. Change KeyCode value on any desired key. After this player will be sprinting by your setted key. Note All created maps contain default inputs, these are inputs that are used by the system. The default inputs can only be read and edited, but cannot be deleted. You can create your own custom inputs that you can edit, delete and call through the API. Warning The values contained in the Axes section are numerical values in the range -1 to 1. All values must be created in the standard Unity Input Manager (this applies only to the Axes properties) .","title":"Edit Input Mapping"},{"location":"player_section/input-manager/#add-custom-input","text":"To add your button or axis, click Add Property , a small window will open in which you need to enter the key by which this button or axis will be called. Then click Apply the property will be created in the map. With this key, you can call the created property through the API.","title":"Add Custom Input"},{"location":"player_section/overview/","text":"Create Player 1. Open Aurora Manager window. Aurora FPS / Aurora Manager 2. Choose Player section. 3. Configure the player you want to create. Field Description Template Advanced Rigidbody Player: This is a player that already contains preset weapons and the body of a character with animations. Simple Rigidbody Player: This is a lightweight clean player that only has all the necessary components. Weapons and bodies are not preset. (Suitable when you want to customize the player ndependently) Input Mapping Map with buttons on which the player will move. The asset already has a pre-installed Input Mapping which is called Standalone Input Mapping . you can select it from the list or create your own unique one. Optional Components You can also add various optional components to the player if desired (depending on the template , some of the optional components may already be pre- installed in the default player) . 4. Press create button. After this player will be created at the scene!","title":"Overview"},{"location":"player_section/overview/#create-player","text":"1. Open Aurora Manager window. Aurora FPS / Aurora Manager 2. Choose Player section. 3. Configure the player you want to create. Field Description Template Advanced Rigidbody Player: This is a player that already contains preset weapons and the body of a character with animations. Simple Rigidbody Player: This is a lightweight clean player that only has all the necessary components. Weapons and bodies are not preset. (Suitable when you want to customize the player ndependently) Input Mapping Map with buttons on which the player will move. The asset already has a pre-installed Input Mapping which is called Standalone Input Mapping . you can select it from the list or create your own unique one. Optional Components You can also add various optional components to the player if desired (depending on the template , some of the optional components may already be pre- installed in the default player) . 4. Press create button. After this player will be created at the scene!","title":"Create Player"},{"location":"weapon_section/bullet_item/","text":"Overview All shooting systems use Bullet Item as bullets . This is a type that contains basic information. Create Bullet Item Open Asset Menu by right click on project window. Go to the path: Create / Aurora FPS / Items / Bullet Configure Bullet Item Select Bullet Item asset to edit. In inspector window will be opened editor. Field Description ID Unique identifier, generated automatically. Can be edited manually (required property) . Name Name of the bullet (optional property) . Description Description of the bullet (optional property) . Image Sprite of the bullet (optional property) . Damage Damage caused by a bullet (required property) . Impulse The impulse that will be transmitted to the physical object when it is hit (optional property) . Balls Variance The number of produced fractions when fired, the default is 1 that means it's an ordinary bullet (optional property, suitable for shotgun bullet ) . Balls Numbers The strength of the spread of these fractions (optional property, suitable for shotgun bullet ) . Decal Mapping This is a map that contains sounds and traces of a given bullet hit on different surfaces. Drop Properties It contains the data of the object that will be thrown when the player throws the bullet.","title":"Bullet Item"},{"location":"weapon_section/bullet_item/#overview","text":"All shooting systems use Bullet Item as bullets . This is a type that contains basic information.","title":"Overview"},{"location":"weapon_section/bullet_item/#create-bullet-item","text":"Open Asset Menu by right click on project window. Go to the path: Create / Aurora FPS / Items / Bullet","title":"Create Bullet Item"},{"location":"weapon_section/bullet_item/#configure-bullet-item","text":"Select Bullet Item asset to edit. In inspector window will be opened editor. Field Description ID Unique identifier, generated automatically. Can be edited manually (required property) . Name Name of the bullet (optional property) . Description Description of the bullet (optional property) . Image Sprite of the bullet (optional property) . Damage Damage caused by a bullet (required property) . Impulse The impulse that will be transmitted to the physical object when it is hit (optional property) . Balls Variance The number of produced fractions when fired, the default is 1 that means it's an ordinary bullet (optional property, suitable for shotgun bullet ) . Balls Numbers The strength of the spread of these fractions (optional property, suitable for shotgun bullet ) . Decal Mapping This is a map that contains sounds and traces of a given bullet hit on different surfaces. Drop Properties It contains the data of the object that will be thrown when the player throws the bullet.","title":"Configure Bullet Item"},{"location":"weapon_section/overview/","text":"Create Weapon To create a weapon, use the Aurora Manager window. Aurora FPS / Aurora Manager Select Weapon section. Configure weapon want you want to create. Field Description Template Select the type of weapon that is closest to the weapon you want to create. Created weapons will already have animations related to this type, but you can always replace them with your own if you want. Shooting System Raycast: lightweight shooting system, does not require large costs on computer resources, shoots a physical ray. Physics: realistic shooting system that shoots bullets, each of which is processed individually in physics. More demanding on resources (optimized through the use of built- in object pool system). Weapon Item Weapon Item asset for this weapon. Bullet Item Type of bullet that the weapon will use for fire. Override Contains objects (mesh) to override, depending on the template they can vary. When you redefine these objects, you replace the standard objects on new ones , this is a kind of auto Retargeting and built- in animations will work on your created weapons. Optional Components You can also add various optional components to the weapon if desired (depending on the template , some of the optional components may already be pre-installed in the weapon) . Press Create button. After this new weapon will be created at the scene. Note Make this weapon as Player camera child. Player / FPCamera / CamearInstance","title":"Overview"},{"location":"weapon_section/overview/#create-weapon","text":"To create a weapon, use the Aurora Manager window. Aurora FPS / Aurora Manager Select Weapon section. Configure weapon want you want to create. Field Description Template Select the type of weapon that is closest to the weapon you want to create. Created weapons will already have animations related to this type, but you can always replace them with your own if you want. Shooting System Raycast: lightweight shooting system, does not require large costs on computer resources, shoots a physical ray. Physics: realistic shooting system that shoots bullets, each of which is processed individually in physics. More demanding on resources (optimized through the use of built- in object pool system). Weapon Item Weapon Item asset for this weapon. Bullet Item Type of bullet that the weapon will use for fire. Override Contains objects (mesh) to override, depending on the template they can vary. When you redefine these objects, you replace the standard objects on new ones , this is a kind of auto Retargeting and built- in animations will work on your created weapons. Optional Components You can also add various optional components to the weapon if desired (depending on the template , some of the optional components may already be pre-installed in the weapon) . Press Create button. After this new weapon will be created at the scene. Note Make this weapon as Player camera child. Player / FPCamera / CamearInstance","title":"Create Weapon"},{"location":"weapon_section/weapon_item/","text":"Overview Each weapon has its own unique identifier. It describes basic information about weapons. When creating a completely new type of weapon, you must create a unique identifier for it, which the system will use to identify it. Create Weapon Item Open Asset Menu by right click on project window. Go to the path: Create / Aurora FPS / Items / Weapon Configure Weapon Item Select Weapon Item asset to edit. In inspector window will be opened editor. Field Description ID Unique identifier, generated automatically. Can be edited manually (required property) . Name Name of the weapon, will be displayed on HUD (optional property) . Description Description of the weapon (optional property) . Image Sprite of the weapon will be displayed on HUD (optional property) . Group Each weapon must have a group that it belongs to, it will be sorted by this group in the inventory, you can set any group name you want. For example Assault Rifle or Sniper Rifle group name can be named Rifles (required property) . Drop Properties It contains the data of the object that will be thrown when the player throws the weapon.","title":"Weapon Item"},{"location":"weapon_section/weapon_item/#overview","text":"Each weapon has its own unique identifier. It describes basic information about weapons. When creating a completely new type of weapon, you must create a unique identifier for it, which the system will use to identify it.","title":"Overview"},{"location":"weapon_section/weapon_item/#create-weapon-item","text":"Open Asset Menu by right click on project window. Go to the path: Create / Aurora FPS / Items / Weapon","title":"Create Weapon Item"},{"location":"weapon_section/weapon_item/#configure-weapon-item","text":"Select Weapon Item asset to edit. In inspector window will be opened editor. Field Description ID Unique identifier, generated automatically. Can be edited manually (required property) . Name Name of the weapon, will be displayed on HUD (optional property) . Description Description of the weapon (optional property) . Image Sprite of the weapon will be displayed on HUD (optional property) . Group Each weapon must have a group that it belongs to, it will be sorted by this group in the inventory, you can set any group name you want. For example Assault Rifle or Sniper Rifle group name can be named Rifles (required property) . Drop Properties It contains the data of the object that will be thrown when the player throws the weapon.","title":"Configure Weapon Item"}]}